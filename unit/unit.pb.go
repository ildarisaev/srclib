// Code generated by protoc-gen-gogo.
// source: unit.proto
// DO NOT EDIT!

/*
Package unit is a generated protocol buffer package.

It is generated from these files:
	unit.proto

It has these top-level messages:
	RepoSourceUnit
*/
package unit

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A RepoSourceUnit is the "concrete" form of SourceUnit that includes
// information about which repository (and commit) the source unit
// exists in. In general, type SourceUnit is used during analysis of a
// single source unit and type RepoSourceUnit is used afterwards
// (either in cross-source-unit analysis, such as cross-reference
// resolution, or in after-the-fact DB/API queries).
type RepoSourceUnit struct {
	Repo     string `protobuf:"bytes,1,opt,name=Repo,proto3" json:"Repo,omitempty"`
	CommitID string `protobuf:"bytes,2,opt,name=CommitID,proto3" json:"CommitID,omitempty"`
	UnitType string `protobuf:"bytes,3,opt,name=UnitType,proto3" json:"UnitType,omitempty"`
	Unit     string `protobuf:"bytes,4,opt,name=Unit,proto3" json:"Unit,omitempty"`
	// Data is the JSON of the underlying SourceUnit.
	Data []byte `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *RepoSourceUnit) Reset()         { *m = RepoSourceUnit{} }
func (m *RepoSourceUnit) String() string { return proto.CompactTextString(m) }
func (*RepoSourceUnit) ProtoMessage()    {}
