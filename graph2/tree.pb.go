// Code generated by protoc-gen-gogo.
// source: tree.proto
// DO NOT EDIT!

/*
Package graph2 is a generated protocol buffer package.

It is generated from these files:
	tree.proto

It has these top-level messages:
	GitHubRepo
	RepoPermissions
	TreeKey
	Tree
	TreeRev
*/
package graph2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto"
import pbtypes "sourcegraph.com/sqs/pbtypes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GitHubRepo holds additional metadata about GitHub repos.
type GitHubRepo struct {
	Stars int32 `protobuf:"varint,1,opt,name=stars,proto3" json:"stars,omitempty"`
}

func (m *GitHubRepo) Reset()         { *m = GitHubRepo{} }
func (m *GitHubRepo) String() string { return proto.CompactTextString(m) }
func (*GitHubRepo) ProtoMessage()    {}

// RepoPermissions describes the possible permissions that a user (or an anonymous
// user) can be granted to a repository.
type RepoPermissions struct {
	Read  bool `protobuf:"varint,1,opt,name=read,proto3" json:"read,omitempty"`
	Write bool `protobuf:"varint,2,opt,name=write,proto3" json:"write,omitempty"`
	Admin bool `protobuf:"varint,3,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (m *RepoPermissions) Reset()         { *m = RepoPermissions{} }
func (m *RepoPermissions) String() string { return proto.CompactTextString(m) }
func (*RepoPermissions) ProtoMessage()    {}

type TreeKey struct {
	// Type is the type of source tree
	// (git, hg, build-system specific like pip or npm, ftp)
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// A URL of one of the following forms:
	//   src://{hostname}/{path} (absolute)
	//   src:///{path} (relative)
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (m *TreeKey) Reset()         { *m = TreeKey{} }
func (m *TreeKey) String() string { return proto.CompactTextString(m) }
func (*TreeKey) ProtoMessage()    {}

type Tree struct {
	Key       *TreeKey `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	FetchUrls []string `protobuf:"bytes,2,rep,name=fetch_urls" json:"fetch_urls,omitempty"`
	// Origin is populated for repos fetched via federation or
	// discovery. It is the hostname of the host that owns the repo.
	Origin string `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	// Name is the base name (the final path component) of the source tree,
	// typically the name of the directory that the repository would be cloned
	// into. (For example, for git://example.com/foo.git, the name is "foo".)
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Description is a brief description of the repository.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// HomepageURL is the URL to the repository's homepage, if any.
	HomepageURL string `protobuf:"bytes,6,opt,name=homepage_url,proto3" json:"homepage_url,omitempty"`
	// HTMLURL is the URL to the repository's main page on the
	// Sourcegraph server.
	HTMLURL string `protobuf:"bytes,7,opt,name=html_url,proto3" json:"html_url,omitempty"`
	// DefaultBranch is the default VCS branch used (typically "master" for git
	// repositories and "default" for hg repositories).
	DefaultBranch string `protobuf:"bytes,8,opt,name=default_branch,proto3" json:"default_branch,omitempty"`
	// Language is the primary programming language used in this source tree.
	Language string `protobuf:"bytes,9,opt,name=language,proto3" json:"language,omitempty"`
	// Blocked is whether this repo has been blocked by an admin (and
	// will not be returned via the external API).
	Blocked bool `protobuf:"varint,10,opt,name=blocked,proto3" json:"blocked,omitempty"`
	// Deprecated source trees are labeled as such and hidden from global search
	// results.
	Deprecated bool `protobuf:"varint,11,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// Fork is whether this source tree is a VCS repository fork.
	Fork bool `protobuf:"varint,12,opt,name=fork,proto3" json:"fork,omitempty"`
	// Mirror indicates whether this source tree's canonical location is on
	// another server. Mirror source trees track their upstream.
	Mirror bool `protobuf:"varint,13,opt,name=mirror,proto3" json:"mirror,omitempty"`
	// Private is whether this source tree is private.
	Private bool `protobuf:"varint,14,opt,name=private,proto3" json:"private,omitempty"`
	// CreatedAt is when this source tree was created. If it represents an
	// externally hosted (e.g., GitHub) source tree, the creation date is when it
	// was created at that origin.
	CreatedAt *pbtypes.Timestamp `protobuf:"bytes,15,opt,name=created_at" json:"created_at,omitempty"`
	// UpdatedAt is when this source tree's metadata was last updated (on its origin if
	// it's an externally hosted source tree).
	UpdatedAt *pbtypes.Timestamp `protobuf:"bytes,16,opt,name=updated_at" json:"updated_at,omitempty"`
	// PushedAt is when this source tree's source code was last updated (e.g., via
	// VCS-push).
	PushedAt *pbtypes.Timestamp `protobuf:"bytes,17,opt,name=pushed_at" json:"pushed_at,omitempty"`
	// Permissions describes the permissions that the current user (or anonymous users,
	// if there is no current user) is granted to this repository.
	Permissions *RepoPermissions `protobuf:"bytes,18,opt,name=permissions" json:"permissions,omitempty"`
	GitHub      *GitHubRepo      `protobuf:"bytes,19,opt,name=github" json:"github,omitempty"`
}

func (m *Tree) Reset()         { *m = Tree{} }
func (m *Tree) String() string { return proto.CompactTextString(m) }
func (*Tree) ProtoMessage()    {}

type TreeRev struct {
	Tree *Tree `protobuf:"bytes,1,opt,name=tree" json:"tree,omitempty"`
	// Rev is the version of the source tree
	Rev string `protobuf:"bytes,2,opt,name=rev,proto3" json:"rev,omitempty"`
	// Type of revision (e.g., commit ID, branch name, or tag for VCS
	// repositories; version string for build system packages)
	RevType string `protobuf:"bytes,3,opt,name=rev_type,proto3" json:"rev_type,omitempty"`
}

func (m *TreeRev) Reset()         { *m = TreeRev{} }
func (m *TreeRev) String() string { return proto.CompactTextString(m) }
func (*TreeRev) ProtoMessage()    {}
